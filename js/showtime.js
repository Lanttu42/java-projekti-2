/*
 _______ __                              |                
|    ___|__.-----.-----.               --o--                
|   .___|  |o    |     |                 |               
|___|__ |__|__|__|__|__|_______ ______o _______ _______ 
|  |/  |_     _|    | o|       |_     _|_     _|    |  |
|     < _|   |_|       |   -   | |   |  _|   |_|       |
|__|\__|_______|__|____|_______| |___| |_______|__|____|
                                       Legendary Edition                     

SHOWTIME
This script uses moviesDb that was initialised in ajax.js
This is loaded during initialize() in that ajax.js so everything
that happens this code, happens inside the initialize()...

Everything you see on the webpage, is generated in this file.
Everything you see in the kitchen, is generated by your kids.

*/
console.log("Its Showtime");
const showtime = document.getElementById('showtime');

// This is my OneShot template for the movies.
const template = `
<div class="onemovie">
    <div class="movie-container">
        <div class="left movie-time">%dttmShowStart%</div>
        <div class="movie-center">
            <div class="movie-title">%Title%</div>
            <div class="movie-desc">%Genres% | %LengthInMinutes% min. | %SpokenLanguage% | %TheatreAndAuditorium% | <strong>%PresentationMethod%</strong></div>
        </div>
        <div class="movie-right rating"><img src="%RatingImageUrl%" alt="%Rating%"></div>
        <div class="movie-right movie-studio">HMM</div>
    </div>
    <div class="movie-container">
        <div class="left movie-closing">%dttmShowEnd%</div>
        <div class="movie-center movie-info">%Info%</div>
        <div class="movie-right"><a href="%ShowURL%">LIPUT</a></div>
        <div class="movie-right movie-studio"><a href="%Youtube%">Trailer</a></div>
    </div>
</div>
`;

// I use this to fill the template. 
function fillTemplate(data) { // I get the data as parameter from the getNextMovies or similar function  
    return template.replace(/%(\w+)%/g, (match, p1) => { // Data and Template has the same names. Data properties and %strings% in template. With regular expression I match those.
        return data[p1] || '';  // If there is no match, it returns '' for that property.
    });
}


function getNextMovies() {
    const thetime = new Date();
    //const timeNow = thetime.getTime();
    const timeNow = thetime.setHours(19,0,0,0); 
    //console.log(timeNow);
    const timeMidnight = thetime.setHours(24,0,0,0); 
    //console.log(timeMidnight);
    let htmlData = "<h2>Next Movies</h2><br>";
    
    // const timestamp = Date.parse(dateTimeString);
    for (let movieId in moviesDb) {
        if (moviesDb.hasOwnProperty(movieId)) {
            const movie = moviesDb[movieId];
            //console.log(movie.dttmShowStart);
            const begins = Date.parse(movie.dttmShowStart);
            if (begins > timeNow) {
                const currentMovie = {
                dttmShowStart: humanTime(begins),
                dttmShowEnd: humanTime(Date.parse(movie.dttmShowEnd)),
                Title: movie.Title,
                LengthInMinutes: movie.LengthInMinutes,
                Rating: movie.Rating,
                ProductionYear: movie.ProductionYear,
                Genres: movie.Genres,
                Theatre: movie.Theatre,
                TheatreAuditorium: movie.TheatreAuditorium,
                PresentationMethod: movie.PresentationMethod,
                SpokenLanguage: movie.SpokenLanguage.split('\n')[1].trim(), // This went full ape nuts. When I converted this XML to array I converted nested childs to Strings ... 
                RatingImageUrl: movie.RatingImageUrl,
                TheatreAndAuditorium: movie.TheatreAndAuditorium,
                ShowURL: movie.ShowURL
                }
                console.log(movie.ShowUrl);
                htmlData += fillTemplate(currentMovie);
            } else {
                console.log("Meni jo!");
            }
        }
    }
    return htmlData;
}

showtime.innerHTML = getNextMovies();